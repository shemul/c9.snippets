# scope: javascript

snippet maxlen
	// eslint-disable-next-line max-len ${0}

snippet eslint
	// eslint-disable-next-line ${0}

snippet flow
	// @flow
	${0}

snippet noflow
	// @noflow
	${0}

snippet expectError
	// \$ExpectError

snippet fixMe
	// \$FlowFixMe

snippet comment
	//------------------------------------------------------------------------------
	// ${0}
	//------------------------------------------------------------------------------

snippet import
	import ${1} from '${2}';${0}


snippet lodash
	import {${1}} from 'lodash';${0}


# Component import from file with the same name
snippet ci
	import ${1} from './${1}';${0}

# className insert
snippet cn
	className={css.${1}}${0}

snippet classes
	const classes = className ? `\${className} \${${1}}` : ${1};

snippet react
	// @flow
	import * as React from 'react';
	${0}

# Shallow test file 
snippet stf
	import * as React from 'react';
	import { shallow } from 'enzyme';
	import ${1} from './index.js';

	describe('<${1} />', () => {
	  test('${2}', () => {
		const wrapper = shallow(
		  <${1} ${0} />
		);
		expect(wrapper).toMatchSnapshot();
	  });
	});
	

snippet itshallow
	test('${2}', () => {
	  const wrapper = shallow(
		<${1} ${0} />
	  );
	  expect(wrapper).toMatchSnapshot();
	});

snippet it
	test('${1}', () => {
	  expect(${2}).${0}();
	});

snippet test
	test('${1}', () => {
	  expect(${2}).${0}();
	});


snippet describeshallow
	describe('${1}', () => {
	  it('${2}', () => {
		const wrapper = shallow(
		  <${1} ${0} />
		);
		expect(wrapper).toMatchSnapshot();
	  });
	});

# Describe snippet
snippet describe
	describe('${1}', () => {
	  test('${1}', () => {
	    expect(${2}).${0}();
	  });
	});

# Stateless Functional Component
snippet stateless
	// @flow
	import * as React from 'react';
	import css from './styles.css';
	
	type Props = {
	  ${2}
	};
	
	const ${1} = ({${3}}: Props) => {
	  return (
		<div>
		  ${0}
		</div>
	  );
	};
	
	export default ${1};

snippet connectedcomponent
	// @flow
	import * as React from 'react';
	import { connect } from 'react-redux';
	import css from './styles.css';
	
	type Props = {
	  ${2}
	};
	
	const mapStateToProps = (state: State): Props => {
	  return {
		${3}
	  };
	};
	
	
	const dispatcher = {
	  ${5}
	};
	
	type DispatcherProps = {
	  ${4}
	};
	
	class ${1} extends React.Component<Props & DispatcherProps> {
	  render() {
		return (
		  <div>
			${0}
		  </div>
		);
	  }
	}
	
	export default connect(mapStateToProps, dispatcher)(${1});

# React Component
snippet component
	// @flow
	import * as React from 'react';
	import css from './styles.css';
	
	type Props = {
	  ${2}
	};
	
	class ${1} extends React.Component<Props> {
	  render() {
		return (
		  <div>
			${0}
		  </div>
		);
	  }
	}
	
	export default ${1};

# React Component with State
snippet componentstate
	// @flow
	import * as React from 'react';
	import css from './styles.css';
	
	type Props = {
	  ${2}
	};
	
	type State = {
	  ${3}
	}
	
	class ${1} extends React.Component<Props, State> {
	  state = {
		${4}
	  }
	  
	  render() {
		return (
		  <div>
			${0}
		  </div>
		);
	  }
	}
	
	export default ${1};

snippet query
	return (
	  <Query query={query} variables={variables} fetchPolicy={FETCH_POLICY}>
	    {({ loading, error, data }) => {
	      if (loading) {
	        return 'loading';
	      }
	
	      if (error) {
	        return 'error';
	      }
	
	      ${0}
	
	      return <div data={data} />;
	    }}
	  </Query>
	);


snippet switch
	switch (${1:expression}) {
	  case ${3:case}:
		${4:// code}
		break;
	  ${0}
	  default:
		${2:// code}
		break;
	}


# Expect to be true
snippet tbt
	.toBe(true);${0}


# Expect to be false
snippet tbf
	.toBe(false);${0}

# Expect to have length
snippet thl
	.toHaveLength(${1});${0}

# Expect to have been called times
snippet tct
	.toHaveBeenCalledTimes(${1});${0}

# import shortcuts for graphql
snippet cql
	import { ${1} } from 'constants/graphql';${0}

snippet tql
	import type { ${1} } from 'types/graphql';${0}

# data-testid
snippet data
	data-testid="${1}"${0}

# JSX snippets
snippet div
	<div ${1}>${0}</div>

# JSX snippets
snippet <div
	<div ${1}>${0}</div>

snippet <span
	<span ${1}>${0}</span>

snippet map
	${1}.map(each_item => {
		${2}
	})
	